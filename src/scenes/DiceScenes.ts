import { BaseScene, Markup } from 'telegraf';
import type { Button } from 'telegraf/typings/markup';
import type IBot from '@/typings/TelegramBot';
import DiceRollerMiddleware from '@/middlewares/DiceRollerMiddleware';
import BaseHandler from '@/utils/BaseHandler';
import TelegrafHelpers from '@/utils/TelegrafHelpers';
import { COMMAND_NAME } from '@/constants/Commands';
import { SOCIAL_LINKS } from '@/locales/about';

enum ACTIONS {
  ExitFromRoller = '‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –±—Ä–æ—Å–∫–∏',
}

enum CALLBACK_ACTIONS {
  ExitFromRoller = 'exitFromRoller'
}

const EXIT_BUTTON: Button[] = [Markup.button(ACTIONS.ExitFromRoller)];

const LEAVE_MSG = '–∑–∞–∫–æ–Ω—á–∏–ª(–∞) –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫–∏';

const getDiceKeyboard = () => ([
  EXIT_BUTTON,
  [
    Markup.button('d2'),
    Markup.button('d4'),
    Markup.button('d6'),
    Markup.button('d8')
  ],
  [Markup.button('d10'), Markup.button('d12')],
  [
    Markup.button('–ø–æ–º'),
    Markup.button('d20'),
    Markup.button('–ø—Ä–µ')
  ]
]);

const scene = new BaseScene<IBot.TContext>('diceRoll');
const diceRoll = new DiceRollerMiddleware();

scene.enter(async ctx => {
  const userName = TelegrafHelpers.getUserMentionHTMLString(ctx);

  await ctx.replyWithHTML(`${ userName } –≤–æ—à–µ–ª(–ª–∞) –≤ —Ä–µ–∂–∏–º –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤.`
    + '\n–í—ã–±–∏—Ä–∞–π –∫—É–±–∏–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ä–º—É–ª—É', {
    reply_to_message_id: ctx.message?.message_id,
    disable_notification: true,
    reply_markup: {
      keyboard: getDiceKeyboard(),
      input_field_placeholder: '2d20, –Ω–∞–ø—Ä–∏–º–µ—Ä...',
      resize_keyboard: true,
      selective: true
    }
  });
});

scene.help(async ctx => {
  const msg = '–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞—à—É <a href="https://ttg.club/info/telegram_spells_bot">—Å—Ç–∞—Ç—å—é</a>. '
    + '–¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫—É–±–∞–º–∏. '
    + '\n–°–æ—Ö—Ä–∞–Ω–∏ —Å–µ–±–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å üòâ'
    + '\n\n<a href="https://ttg.club/info/telegram_spells_bot">https://ttg.club/telegram_bot</a>';

  await ctx.replyWithHTML(msg, {
    reply_to_message_id: ctx.message?.message_id,
    disable_notification: true,
    reply_markup: {
      keyboard: getDiceKeyboard(),
      input_field_placeholder: '2d20, –Ω–∞–ø—Ä–∏–º–µ—Ä...',
      resize_keyboard: true,
      selective: true
    }
  });
});

scene.hears(ACTIONS.ExitFromRoller, async ctx => {
  await BaseHandler.leaveScene(ctx, LEAVE_MSG);
});

scene.on('text', async ctx => {
  if (!ctx.message || !('text' in ctx.message)) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...', {
      disable_notification: true
    });

    await BaseHandler.leaveScene(ctx, LEAVE_MSG);

    return;
  }

  try {
    const msg = await diceRoll.getDiceMsg(ctx.message.text);

    if (!msg) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ Discord-–∫–∞–Ω–∞–ª', {
        reply_to_message_id: ctx.message.message_id,
        disable_notification: true,
        reply_markup: Markup
          .inlineKeyboard([[Markup.urlButton(SOCIAL_LINKS.discord.label, SOCIAL_LINKS.discord.url)]])
      });

      await BaseHandler.leaveScene(ctx, LEAVE_MSG);

      return;
    }

    await ctx.replyWithHTML(msg, {
      reply_to_message_id: ctx.message.message_id,
      disable_notification: true,
      reply_markup: {
        keyboard: getDiceKeyboard(),
        input_field_placeholder: '2d20, –Ω–∞–ø—Ä–∏–º–µ—Ä...',
        resize_keyboard: true,
        selective: true
      }
    });
  } catch (err) {
    await ctx.reply('–í —Ñ–æ—Ä–º—É–ª–µ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ –æ—à–∏–±–∫–∞, '
      + `–æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /${ COMMAND_NAME.HELP }, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è üòâ`, {
      reply_to_message_id: ctx.message.message_id,
      disable_notification: true,
      reply_markup: {
        keyboard: getDiceKeyboard(),
        input_field_placeholder: '2d20, –Ω–∞–ø—Ä–∏–º–µ—Ä...',
        resize_keyboard: true,
        selective: true
      }
    });
  }
});

scene.action(CALLBACK_ACTIONS.ExitFromRoller, async ctx => {
  await ctx.answerCbQuery();

  await BaseHandler.leaveScene(ctx, LEAVE_MSG);
});

export default scene;
