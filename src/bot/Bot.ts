import TelegramBot from 'node-telegram-bot-api';
import Commands from './constants/Commands';

export default class Bot {
    protected readonly bot: TelegramBot;

    public constructor() {
        this.bot = new TelegramBot(<string>process.env.TG_TOKEN, { polling: true });

        this.init();
    }

    private init(): void {
        this.setupBotListeners();
    }

    private setupBotListeners(): void {
        this.onError();
        this.onInlineQuery();
        this.onCommand();
    }

    private onError(): void {
        this.bot.on('polling_error', error => {
            console.log(error);
        });
    }

    private onInlineQuery(): void {
        this.bot.on('inline_query', (query: TelegramBot.InlineQuery) => {
            this.bot.answerInlineQuery(query.id, [], {
                cache_time: 0,
                switch_pm_text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                switch_pm_parameter: 'help'
            }).then()
        })
    }

    private onCommand(): void {
        this.bot.onText(<RegExp>Bot.CommandRegExp(Commands.START), msg => this.resolveStart(msg));
    }

    static CommandRegExp(name: string): RegExp {
        if (!name) {
            console.error('–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ RegExp –∫–æ–º–∞–Ω–¥—ã');

            return new RegExp(name);
        }

        return new RegExp(`${name} (.+)`)
    }

    private resolveStart(msg: TelegramBot.Message): void {
        const { chat: { id }} = msg;
        const username: string | undefined = msg.from?.first_name || msg.from?.username || undefined

        this.bot.sendMessage(id, `–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å${username ? `, ${username}` : ''}! üòá`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Ç',
                        switch_inline_query: '–ü—Ä–∏–≤–µ—Ç :)'
                    }]
                ]
            }
        }).then()
    }
}
