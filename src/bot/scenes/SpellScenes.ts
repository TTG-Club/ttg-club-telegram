import { Scenes } from 'telegraf';
import IBot from '../../types/bot';
import SpellQueries from '../../db/queries/SpellQueries';
import SpellActions from '../actions/SpellActions';

export default class SpellScenes {
    static findSpell(): Scenes.BaseScene<IBot.ISessionContext> {
        const scene = new Scenes.BaseScene<IBot.ISessionContext>('findSpell');

        scene.enter(async ctx => {
            await ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã)')
        });

        scene.command('back', async ctx => {
            await ctx.scene.leave();
        })

        scene.on('text', async ctx => {
            if (!ctx.message || !('text' in ctx.message)) {
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...');

                await ctx.scene.reenter();
            } else if (ctx.message.text.length < 3) {
                await ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ');

                await ctx.scene.reenter();
            } else {
                try {
                    const spellName = ctx.message.text;
                    const spellList = await SpellQueries.getSpellListByName(spellName);

                    if (spellList.length === 1) {
                        const msg = SpellActions.formatSpellMessage(spellList[0])

                        await ctx.replyWithHTML(msg);
                        await ctx.scene.leave();
                    } else if (spellList.length > 1 && spellList.length < 21) {
                        await ctx.reply(`–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "${spellName}"`);
                        await ctx.reply(
                            '–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞',
                            SpellActions.getSpellListMarkup(spellList)
                        );
                        await ctx.scene.leave();
                    } else if (spellList.length > 20) {
                        // eslint-disable-next-line max-len
                        await ctx.reply(`–Ø –Ω–∞—à–µ–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "${spellName}"...`);
                        await ctx.scene.reenter();
                    } else {
                        await ctx.reply('–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ...');
                        await ctx.scene.reenter();
                    }
                } catch (err) {
                    console.error(err)

                    await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑');
                    await ctx.scene.leave();
                }
            }
        });

        scene.on('message', async ctx => {
            await ctx.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è üôÉ');

            await ctx.scene.reenter();
        })

        return scene;
    }
}
