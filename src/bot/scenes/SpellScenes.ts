import { Markup, Scenes } from 'telegraf';
import { InlineKeyboardMarkup } from 'telegraf/src/core/types/typegram';
import SpellQueries from '../../db/queries/SpellQueries';
import IDB from '../../types/db';
import StringManipulation from '../../helpers/StringManipulation';
import IBot from '../../types/bot';

export default class SpellScenes {
    static ACTIONS = {
        findByID: 'FIND_BY_ID',
        showFounded: 'SHOW_FOUNDED',
        exitFromSearch: 'EXIT_FROM_SEARCH'
    }

    static EXIT_BUTTON = [Markup.button.callback('–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è', SpellScenes.ACTIONS.exitFromSearch)];

    static findSpell(): Scenes.BaseScene<IBot.IContext> {
        const scene = new Scenes.BaseScene<IBot.IContext>('findSpell');

        scene.enter(async ctx => {
            await ctx.reply(
                '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã)',
                Markup.inlineKeyboard([SpellScenes.EXIT_BUTTON])
            );
        });

        scene.on('text', async ctx => {
            if (!ctx.message || !('text' in ctx.message)) {
                await ctx.reply(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...',
                    Markup.inlineKeyboard([SpellScenes.EXIT_BUTTON])
                );

                await ctx.scene.reenter();
            } else if (ctx.message.text.length < 3) {
                await ctx.reply(
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ',
                    Markup.inlineKeyboard([SpellScenes.EXIT_BUTTON])
                );

                await ctx.scene.reenter();
            } else {
                try {
                    // eslint-disable-next-line no-param-reassign
                    ctx.scene.session.spellName = ctx.message.text;

                    const { spellName } = ctx.scene.session;
                    const spellList = await SpellQueries.getSpellListByName(spellName);

                    if (spellList.length === 1) {
                        const msg = SpellScenes.formatSpellMessage(spellList[0])

                        await ctx.replyWithHTML(msg);

                        await ctx.scene.leave();
                    } else if (spellList.length > 1 && spellList.length < 21) {
                        // eslint-disable-next-line no-param-reassign
                        ctx.scene.session.previousSpells = spellList;

                        await ctx.reply(
                            // eslint-disable-next-line max-len
                            `–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "${spellName}".\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:`,
                            SpellScenes.getSpellListMarkup(spellList)
                        );
                    } else if (spellList.length > 20) {
                        await ctx.reply(`–Ø –Ω–∞—à–µ–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "${spellName}"...`);

                        await ctx.scene.reenter();
                    } else {
                        await ctx.reply('–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ...');

                        await ctx.scene.reenter();
                    }
                } catch (err) {
                    console.error(err);

                    await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑');

                    await ctx.scene.leave();
                }
            }
        });

        scene.action(new RegExp('.*'), async (ctx, next) => {
            await ctx.answerCbQuery();

            await next();
        });

        scene.action(new RegExp(`^${SpellScenes.ACTIONS.findByID} (.+)`), async ctx => {
            const { previousSpells } = ctx.scene.session;
            const spell = previousSpells.find(item => String(item._id) === ctx.match[1]) as IDB.ISpell;
            const msg = SpellScenes.formatSpellMessage(spell);

            await ctx.editMessageText(msg, Markup.inlineKeyboard([
                [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', SpellScenes.ACTIONS.showFounded)],
                SpellScenes.EXIT_BUTTON
            ]));
        });

        scene.action(SpellScenes.ACTIONS.showFounded, async ctx => {
            const { spellName, previousSpells } = ctx.scene.session;

            await ctx.editMessageText(
                `–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "${spellName}".\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:`,
                SpellScenes.getSpellListMarkup(previousSpells)
            );
        })

        scene.action(SpellScenes.ACTIONS.exitFromSearch, async ctx => {
            await ctx.editMessageReplyMarkup(undefined);
            await ctx.reply('–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è');

            await ctx.scene.leave();
        });

        scene.on('message', async ctx => {
            await ctx.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è üôÉ');
            await ctx.scene.reenter();
        })

        return scene;
    }

    static formatSpellMessage = (spell: IDB.ISpell): string => {
        const spellLevel: string = 'level' in spell && spell.level ? `${spell.level} —É—Ä–æ–≤–µ–Ω—å` : '–ó–∞–≥–æ–≤–æ—Ä';

        let reply = `${StringManipulation.capitalizeFirstLetter(spell.name)} (${spellLevel})\n`;

        if ('source' in spell && spell.source) {
            reply += `\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${spell.source};`;
        }

        if ('school' in spell && spell.school) {
            reply += `\n–®–∫–æ–ª–∞: ${spell.school};`;
        }

        if ('castingTime' in spell && spell.castingTime) {
            reply += `\n–í—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: ${spell.castingTime};`;
        }

        if ('duration' in spell && spell.duration) {
            reply += `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${spell.duration};`;
        }

        if ('range' in spell && spell.range) {
            reply += `\n–î–∞–ª—å–Ω–æ—Å—Ç—å: ${spell.range};\n`;
        }

        if ('materials' in spell && spell.materials) {
            reply += `\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${spell.materials};\n`;
        }

        if ('text' in spell && spell.text) {
            reply += `\n${spell.text}`;
        }

        return reply
    }

    static getSpellListMarkup = (spellList: IDB.ISpell[]): Markup.Markup<InlineKeyboardMarkup> => {
        // eslint-disable-next-line max-len
        const spellButtons = spellList.map(spell => [Markup.button.callback(spell.name, `${SpellScenes.ACTIONS.findByID} ${spell._id}`)]);

        return Markup.inlineKeyboard([
            ...spellButtons,
            SpellScenes.EXIT_BUTTON
        ]);
    }
}
