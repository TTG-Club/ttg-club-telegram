import _ from 'lodash';
import {
    Composer,
    Markup
} from 'telegraf';
import { TelegrafContext } from 'telegraf/typings/context';
import {
    COMMAND_NAME, COMMANDS_LIST
} from '../constants/Commands';
import IBot from '../../../typings/TelegramBot';
import { ABOUT_MESSAGE, SOCIAL_LINKS } from '../../locales/about';

const bot = new Composer<IBot.TContext>();

const helpResponse = async (ctx: TelegrafContext) => {
    try {
        const defaultCommands = _.cloneDeep(COMMANDS_LIST);
        const modifiedList = Object.values(defaultCommands).map(item => (
            `${ COMMANDS_LIST[item.command].fullDescription }`
        ));

        let msg = '–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –∏–ª–∏ –≤ —á–∞—Ç, –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç –±–æ—Ç, '
            + `–Ω–∞–ø—Ä–∏–º–µ—Ä: /${ COMMAND_NAME.HELP }&#10;`
            + '&#10;<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>&#10;';

        modifiedList.forEach((cmd: string) => {
            msg += `\n${ cmd }`;
        });

        await ctx.replyWithHTML(msg, {
            reply_to_message_id: ctx.message?.message_id,
            disable_notification: true
        });
    } catch (err) {
        console.error(err);
    }
}

const inlineResponse = async (ctx: TelegrafContext) => {
    try {
        const msg = '–ò—Å–∫–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤ —á–∞—Ç–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram, '
            + '–≥–¥–µ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.&#10;'
            + `&#10;<b>–§–æ—Ä–º–∞—Ç:</b> @${ ctx.botInfo?.username } [<i>–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</i>]&#10;`
            + `&#10;<b>–ü—Ä–∏–º–µ—Ä:</b> <i>@${ ctx.botInfo?.username } –≤—Ä–∞—Ç–∞</i>&#10;`;

        await ctx.replyWithHTML(msg, {
            reply_to_message_id: ctx.message?.message_id,
            disable_notification: true
        });
    } catch (err) {
        console.error(err);
    }
}

bot.start(async ctx => {
    try {
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! üëãüèª', {
            reply_to_message_id: ctx.message?.message_id,
            reply_markup: Markup.inlineKeyboard(
                [[
                    Markup.callbackButton('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', COMMAND_NAME.HELP)
                ]]
            )
        })
    } catch (err) {
        console.error(err)
    }
});

bot.command(COMMAND_NAME.ABOUT, async ctx => {
    const getLinksKeyboard = () => Markup.inlineKeyboard(
        Object.values(SOCIAL_LINKS).map(link => ([
            Markup.urlButton(link.label, link.url)
        ]))
    )

    await ctx.reply(
        ABOUT_MESSAGE,
        {
            reply_to_message_id: ctx.message?.message_id,
            disable_notification: true,
            reply_markup: getLinksKeyboard()
        }
    )
});

bot.action(COMMAND_NAME.HELP, async ctx => {
    await inlineResponse(ctx);
    await helpResponse(ctx);
});

bot.help(async ctx => {
    await inlineResponse(ctx);
    await helpResponse(ctx);
});

bot.action(/.*/, async ctx => {
    await ctx.answerCbQuery();
});

export default bot;
