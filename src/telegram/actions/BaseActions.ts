import _ from 'lodash';
import {
    Composer,
    Markup
} from 'telegraf';
import { TelegrafContext } from 'telegraf/typings/context';
import { COMMAND_NAME, COMMANDS_LIST } from '../constants/Commands';
import IBot from '../../../typings/TelegramBot';
import TContext = IBot.TContext;

export default class BaseActions {
    private bot = new Composer<TContext>();

    public registerCommands() {
        this.onStart();
        this.onHelp();
        this.onAbout();

        return this.bot;
    }

    private onStart() {
        this.bot.start(async ctx => {
            try {
                await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! üëãüèª', {
                    reply_markup: Markup.inlineKeyboard(
                        [[
                            Markup.callbackButton('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', 'baseHelp')
                        ]]
                    )
                })
            } catch (err) {
                console.error(err)
            }
        })
    }

    private onHelp() {
        const helpResponse = async (ctx: TelegrafContext) => {
            try {
                const defaultCommands = _.cloneDeep(COMMANDS_LIST);
                const modifiedList = Object.values(defaultCommands).map(item => (
                    `${ COMMANDS_LIST[item.command].fullDescription }`
                ))

                let msg = '<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n';

                modifiedList.forEach((cmd: string) => {
                    msg += `\n${cmd}`;
                });

                await ctx.replyWithHTML(msg);
            } catch (err) {
                console.error(err);
            }
        }

        this.bot.action('baseHelp', async ctx => {
            await ctx.answerCbQuery();

            await helpResponse(ctx)
        });

        this.bot.help(async ctx => {
            await helpResponse(ctx)
        });
    }

    private onAbout() {
        this.bot.command(COMMAND_NAME.ABOUT, async ctx => {
            await ctx.reply('–≠—Ç–æ—Ç –±–æ—Ç —Å–ª—É–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–ª—è –æ–Ω–ª–∞–π–Ω-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ DnD5 Club, '
                + '–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://dnd5.club/'
                + '\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É Discord-–∫–∞–Ω–∞–ª—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚ò∫Ô∏è', {
                reply_markup: {
                    ...Markup.inlineKeyboard([[
                        Markup.urlButton('–°–∞–π—Ç DnD5 Club', 'https://dnd5.club/')
                    ], [
                        Markup.callbackButton('Discord-–∫–∞–Ω–∞–ª', 'https://discord.gg/zqBnMJVf3z')
                    ]])
                }
            })
        });
    }
}
