import { BaseScene, Markup } from 'telegraf';
import { Button, CallbackButton } from 'telegraf/typings/markup';
import { stripHtml } from 'string-strip-html';
import IBot from '../../../typings/TelegramBot';
import NSpell from '../../../typings/Spell';
import TContext = IBot.TContext;
import HTTPService from '../../utils/HTTPService';

enum ACTIONS {
    ExitFromSearch = 'exitFromSearch',
    SpellByName = 'spellByName',
}

const DAMAGE_TYPE = {
    fair: '–æ–≥–æ–Ω—å',
    cold: '—Ö–æ–ª–æ–¥',
    lightning: '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ',
    poison: '—è–¥',
    acid: '–∫–∏—Å–ª–æ—Ç–∞',
    sound: '–∑–≤—É–∫',
    necrotic: '–Ω–µ–∫—Ä–æ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è',
    psychic: '–ø—Å–∏—Ö–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è',
    bludgeoning: '–¥—Ä–æ–±—è—â–∏–π',
    piercing: '–∫–æ–ª—é—â–∏–π',
    slashing: '—Ä—É–±—è—â–∏–π',
    physical: '–¥—Ä–æ–±—è—â–∏–π, –∫–æ–ª—é—â–∏–π –∏ —Ä—É–±—è—â–∏–π —É—Ä–æ–Ω –æ—Ç –Ω–µ–º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫',
    no_nosilver: '–¥—Ä–æ–±—è—â–∏–π, –∫–æ–ª—é—â–∏–π –∏ —Ä—É–±—è—â–∏–π —É—Ä–æ–Ω –æ—Ç –Ω–µ–º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫, –∞ —Ç–∞–∫–∂–µ –æ—Ç –Ω–µ–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä—É–∂–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–æ—Å–µ—Ä–µ–±—Ä–µ–Ω–æ',
    no_damage: '–±–µ–∑ —É—Ä–æ–Ω–∞',
    radiant: '–∏–∑–ª—É—á–µ–Ω–∏–µ',
    no_admantit: '–¥—Ä–æ–±—è—â–∏–π, –∫–æ–ª—é—â–∏–π –∏ —Ä—É–±—è—â–∏–π —É—Ä–æ–Ω –æ—Ç –Ω–µ–º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫, –∞ —Ç–∞–∫–∂–µ –æ—Ç –Ω–µ–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä—É–∂–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∏–∑ –∞–¥–∞–º–∞–Ω—Ç–∏–Ω–∞',
    physical_magic: '–¥—Ä–æ–±—è—â–∏–π, –∫–æ–ª—é—â–∏–π –∏ —Ä—É–±—è—â–∏–π —É—Ä–æ–Ω –æ—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä—É–∂–∏—è',
    piercing_good: '–∫–æ–ª—é—â–∏–π –æ—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä—É–∂–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –¥–æ–±—Ä—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏',
    magic: '—É—Ä–æ–Ω –æ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π',
    dark: '–¥—Ä–æ–±—è—â–∏–π, –∫–æ–ª—é—â–∏–π –∏ —Ä—É–±—è—â–∏–π, –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç—É—Å–∫–ª–æ–≥–æ —Å–≤–µ—Ç–∞ –∏–ª–∏ —Ç—å–º—ã',
    force: '—Å–∏–ª–æ–≤–æ–µ –ø–æ–ª–µ',
    metal_weapon: '–¥—Ä–æ–±—è—â–∏–π, –∫–æ–ª—é—â–∏–π –∏ —Ä—É–±—è—â–∏–π —É—Ä–æ–Ω –æ—Ç –æ—Ä—É–∂–∏—è –∏–∑ –º–µ—Ç–∞–ª–ª–∞',
}

const SCHOOLS = {
    conjuration: '–≤—ã–∑–æ–≤',
    evocation: '–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ',
    illusion: '–∏–ª–ª—é–∑–∏—è',
    necromancy: '–Ω–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è',
    abjuration: '–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ',
    enchantment: '–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ',
    transmutation: '–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    divination: '–ø—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ'
}

export default class SpellScenes {
    private readonly EXIT_BUTTON: CallbackButton[] = [
        Markup.callbackButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è', ACTIONS.ExitFromSearch)
    ];

    private readonly http: HTTPService = new HTTPService();

    public findSpell() {
        const scene = new BaseScene<TContext>('findSpell');

        scene.enter(async ctx => {
            await ctx.reply(
                '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã)',
                Markup.inlineKeyboard([ this.EXIT_BUTTON ]).extra()
            );
        });

        scene.on('text', async ctx => {
            try {
                if (!ctx.message || !('text' in ctx.message)) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...', {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });

                    await ctx.scene.reenter();

                    return;
                }

                if (ctx.message.text.length < 3) {
                    await ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ', {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });

                    await ctx.scene.reenter();

                    return;
                }

                // eslint-disable-next-line no-param-reassign
                ctx.scene.session.state.searchStr = ctx.message.text;

                const { searchStr } = ctx.scene.session.state;

                const spellList: NSpell.ISpell[] = await this.http.post('/spells', {
                    search: searchStr as string
                });

                let spell: NSpell.ISpell | undefined;

                if (spellList.length === 1) {
                    [ spell ] = spellList;

                    const spellMsg: string = this.getSpellMessage(spell);

                    await ctx.replyWithHTML(spellMsg, {
                        disable_web_page_preview: true
                    });
                    await ctx.scene.leave();

                    return;
                }

                if (spellList.length > 10) {
                    await ctx.reply(`–Ø –Ω–∞—à–µ–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è <b>¬´${ searchStr }¬ª</b>... –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ`);

                    await ctx.scene.reenter();

                    return;
                }

                if (spellList.length > 1) {
                    // eslint-disable-next-line no-param-reassign
                    ctx.scene.session.state.spellList = spellList;

                    await ctx.replyWithHTML(
                        // eslint-disable-next-line max-len
                        `–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è <b>¬´${ searchStr }¬ª</b>.\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:`,
                        this.getSpellListMarkup(spellList).extra()
                    );

                    return;
                }

                await ctx.reply('–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ...');

                await ctx.scene.reenter();
            } catch (err) {
                console.error(err);

                await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑', {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });

                await ctx.scene.leave();
            }
        });

        scene.action(/.*/, async (ctx, next) => {
            await ctx.answerCbQuery();

            await next();
        });

        scene.action(new RegExp(`^${ACTIONS.SpellByName} (.+)`), async ctx => {
            if (!Array.isArray(ctx.match) || !ctx.match.length) {
                await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑', {
                    reply_markup: {
                        remove_keyboard: true
                    }
                })

                await ctx.scene.leave();

                return;
            }

            const { match } = ctx;
            const spell = ctx.scene.session.state.spellList
                .find((item: NSpell.ISpell) => item.name === match[1]);

            await ctx.editMessageText(this.getSpellMessage(spell), {
                disable_web_page_preview: true,
                parse_mode: 'HTML',
                reply_markup: this.getSpellListMarkup(ctx.scene.session.state.spellList)
            });
        });

        scene.action(ACTIONS.ExitFromSearch, async ctx => {
            await ctx.editMessageReplyMarkup(undefined);
            await ctx.reply('–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è');

            await ctx.scene.leave();
        });

        scene.on('message', async ctx => {
            await ctx.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è üôÉ');

            await ctx.scene.reenter();
        })

        return scene;
    }

    private getSpellMessage = (spell: NSpell.ISpell): string => {
        let msg = `<b>${ spell.name }</b> [<i>${ spell.englishName }</i>]`;

        msg += `\n<i>${ this.getLevel(spell.level) }, ${ this.getSchool(spell.school) }</i>\n`;
        msg += `\n<b>–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è:</b> ${ JSON.stringify(spell.time) }`;
        msg += `\n<b>–î–∏—Å—Ç–∞–Ω—Ü–∏—è:</b> ${ JSON.stringify(spell.range) }`;
        msg += `\n<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${ JSON.stringify(spell.duration) }`;
        msg += `\n<b>–ö–ª–∞—Å—Å—ã:</b> ${ JSON.stringify(spell.classes.fromClassList) }`;
        msg += `\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${ spell.source }`;

        if (spell.damageInflict) {
            msg += `\n<b>–¢–∏–ø —É—Ä–æ–Ω–∞:</b> ${ this.getDamageType(spell.damageInflict) }`;
        }

        msg += `\n\n${ this.getEntries(spell.entries) }`;
        msg += this.getOriginal(spell.englishName);

        return msg
    }

    private getSpellListMarkup = (spellList: NSpell.ISpell[]) => Markup.inlineKeyboard(
        [
            ...spellList.map(spell => [
                Markup.callbackButton(spell.name, `${ACTIONS.SpellByName} ${spell.name}`)
            ]),
            this.EXIT_BUTTON
        ]
    );

    private getDamageType = (list: string[]): string => list.map((item: string) => (item in DAMAGE_TYPE
        ? DAMAGE_TYPE[item as keyof typeof DAMAGE_TYPE]
        : item)).join('; ');

    private getSchool = (name: string): string => (name in SCHOOLS ? SCHOOLS[name as keyof typeof SCHOOLS] : name);

    private getLevel = (level: number): string => (level ? `${ level } —É—Ä–æ–≤–µ–Ω—å` : '–ó–∞–≥–æ–≤–æ—Ä');

    private getEntries = (entries: string[]): string => {
        const tags = [ 'b', 'strong', 'i', 'em', 'u', 'ins', 's', 'strike', 'del', 'a', 'code', 'pre' ];
        return entries.map((str: string) => stripHtml(str, { ignoreTags: tags })
            .result
            .replaceAll('href="/', `href="${ <string>process.env.SITE_URL }/`))
            .join('\n\n');
    }

    private getOriginal = (engName: string): string => {
        const url = `${ process.env.SITE_URL }/spells/${ engName.replaceAll(' ', '_') }`;

        return `\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${ url }`
    }
}
