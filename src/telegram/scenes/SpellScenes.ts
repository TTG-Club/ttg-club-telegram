import { BaseScene, Markup } from 'telegraf';
import { Button } from 'telegraf/typings/markup';
import { stripHtml } from 'string-strip-html';
import IBot from '../../../typings/TelegramBot';
import NSpell from '../../../typings/Spell';
import TContext = IBot.TContext;
import HTTPService from '../../utils/HTTPService';

enum ACTIONS {
    ExitFromSearch = '–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è'
}

export default class SpellScenes {
    private EXIT_BUTTON: Button[] = [
        Markup.button('–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è')
    ];

    private readonly http: HTTPService = new HTTPService();

    public findSpell() {
        const scene = new BaseScene<TContext>('findSpell');

        scene.enter(async ctx => {
            await ctx.reply(
                '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã)',
                Markup.keyboard([ this.EXIT_BUTTON ]).extra()
            );
        });

        scene.on('text', async ctx => {
            try {
                if (!ctx.message || !('text' in ctx.message)) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...', {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });

                    await ctx.scene.reenter();

                    return;
                }

                if (ctx.message.text.length < 3) {
                    await ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ', {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });

                    await ctx.scene.reenter();

                    return;
                }

                if (ctx.message.text === ACTIONS.ExitFromSearch) {
                    await this.leaveScene(ctx);

                    return;
                }

                // eslint-disable-next-line no-param-reassign
                ctx.scene.session.state.searchStr = ctx.message.text;

                const { searchStr } = ctx.scene.session.state;
                const match = searchStr.match(/(?<spellName>.+?)(\[.+?])$/i);

                if (ctx.scene.session.state?.spellList?.length && match?.groups?.spellName) {
                    const spell = ctx.scene.session.state.spellList
                        .find((item: NSpell.ISpell) => item.name === match.groups.spellName.trim());

                    const spellMsg: string = this.getSpellMessage(spell);

                    await ctx.replyWithHTML(spellMsg, {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                    await ctx.scene.leave();

                    return;
                }

                const spellList: NSpell.ISpell[] = await this.http.post('/spells', {
                    search: searchStr as string
                });

                let spell: NSpell.ISpell | undefined;

                if (spellList.length === 1) {
                    [ spell ] = spellList;

                    const spellMsg: string = this.getSpellMessage(spell);

                    await ctx.replyWithHTML(spellMsg);
                    await ctx.scene.leave();

                    return;
                }

                if (spellList.length > 1) {
                    // eslint-disable-next-line no-param-reassign
                    ctx.scene.session.state.spellList = spellList;

                    await ctx.reply(
                        // eslint-disable-next-line max-len
                        `–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "${ searchStr }".\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:`,
                        this.getSpellListMarkup(spellList)
                    );

                    return;
                }

                // if (spellList.length > 10) {
                //     await ctx.reply(`–Ø –Ω–∞—à–µ–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –≥–¥–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "${ spellName }"...`);
                //
                //     await ctx.scene.reenter();
                //
                //     return;
                // }

                await ctx.reply('–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ...');

                await ctx.scene.reenter();
            } catch (err) {
                console.error(err);

                await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑');

                await ctx.scene.leave();
            }
        });

        scene.on('message', async ctx => {
            await ctx.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è üôÉ');

            await ctx.scene.reenter();
        })

        return scene;
    }

    private leaveScene = async (ctx: IBot.TContext) => {
        await ctx.reply('–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è', {
            reply_markup: {
                remove_keyboard: true
            }
        });

        await ctx.scene.leave();
    }

    private getSpellMessage = (spell: NSpell.ISpell): string => {
        let msg = `${spell.name} [${spell.englishName}]\n`;

        msg += `\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${spell.source}`
        msg += `\n<b>–£—Ä–æ–≤–µ–Ω—å:</b> ${spell.level}`;
        msg += `\n<b>–®–∫–æ–ª–∞:</b> ${spell.school}`;

        for (let i = 0; i < spell.entries.length; i++) {
            if (!i) {
                msg += '\n';
            }

            msg += `\n${stripHtml(spell.entries[i], {
                ignoreTags: [ 'b', 'strong', 'i', 'em', 'u', 'ins', 's', 'strike', 'del', 'a', 'code', 'pre' ]
            }).result}`;
        }

        msg += `\n\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${process.env.SITE_URL}/spells/${spell.englishName.replaceAll(' ', '_')}`

        return msg
    }

    private getSpellListMarkup = (spellList: NSpell.ISpell[]) => {
        const spellButtons = spellList
            .map(spell => [ Markup.button(`${spell.name} [${spell.englishName}]`) ]);

        return Markup.keyboard([
            ...spellButtons,
            this.EXIT_BUTTON
        ]).extra();
    }
}
