import { InlineKeyboard, Keyboard } from 'grammy';

import { SOCIAL_LINKS } from '../../locales/about.js';
import { useDiceRoller } from '../../utils/useDiceRoller.js';
import { useHelpers } from '../../utils/useHelpers.js';
import helpCommand from '../base/help.js';

import type { ICommand } from '../../types/commands.js';
import type { IContext } from '../../types/telegram.js';
import type { Conversation } from '@grammyjs/conversations';

const COMMAND_NAME = 'dice';

const { getUserMentionHtmlString, leaveScene } = useHelpers();
const { getRenderedMsg } = useDiceRoller();

const keyboard = new Keyboard()
  .text('–ó–∞–∫–æ–Ω—á–∏—Ç—å –±—Ä–æ—Å–∫–∏')
  .row()
  .text('d2')
  .text('d4')
  .text('d6')
  .text('d8')
  .row()
  .text('d10')
  .text('d12')
  .row()
  .text('–ø–æ–º')
  .text('d20')
  .text('–ø—Ä–µ')
  .placeholder('2d20, –Ω–∞–ø—Ä–∏–º–µ—Ä...')
  .selected()
  .resized()
  .build();

const helpReply = async (ctx: IContext) => {
  const msg =
    '–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞—à—É <a href="https://ttg.club/info/telegram_spells_bot">—Å—Ç–∞—Ç—å—é</a>. ' +
    '–¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫—É–±–∞–º–∏. ' +
    '\n–°–æ—Ö—Ä–∞–Ω–∏ —Å–µ–±–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å üòâ' +
    '\n\n<a href="https://ttg.club/info/telegram_spells_bot">https://ttg.club/info/telegram_spells_bot</a>';

  await ctx.reply(msg, {
    disable_notification: true,
    reply_markup: {
      keyboard
    }
  });
};

const handler = async (
  conversation: Conversation<IContext>
): Promise<boolean> => {
  const ctx = await conversation.waitFor('message:text');

  if (ctx.hasCommand(helpCommand.command)) {
    await helpReply(ctx);
    await handler(conversation);

    return false;
  }

  const {
    message: { text }
  } = ctx;

  if (text === '–ó–∞–∫–æ–Ω—á–∏—Ç—å –±—Ä–æ—Å–∫–∏') {
    return false;
  }

  try {
    const msg = await getRenderedMsg(text);

    if (!msg) {
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ Discord-–∫–∞–Ω–∞–ª',
        {
          disable_notification: true,
          reply_markup: new InlineKeyboard().url(
            SOCIAL_LINKS.discord.label,
            SOCIAL_LINKS.discord.url
          )
        }
      );

      return false;
    }

    await ctx.replyWithMarkdownV2(msg, {
      disable_notification: true,
      reply_markup: {
        keyboard
      }
    });

    return handler(conversation);
  } catch (err) {
    console.error(err);

    await ctx.reply(
      '–í —Ñ–æ—Ä–º—É–ª–µ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ –æ—à–∏–±–∫–∞, ' +
        `–æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /${helpCommand.command}, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è üòâ`,
      {
        disable_notification: true,
        reply_markup: {
          keyboard
        }
      }
    );

    return handler(conversation);
  }
};

const diceCommand: ICommand = {
  command: COMMAND_NAME,
  description: '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏',
  fullDescription: `/${COMMAND_NAME} - –†–µ–∂–∏–º –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤.`,
  order: 1,
  callback: ctx => ctx.conversation.enter(COMMAND_NAME),
  conversation: async (conversation, ctx) => {
    if (ctx.from === undefined) {
      await ctx.reply('–ë–æ–≥–∏ –æ—Ç–≤–µ—á–∞—é—Ç –ª–∏—à—å —Ç–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å –¥—É—à–∞', {
        disable_notification: true
      });

      return;
    }

    const userName = getUserMentionHtmlString(ctx);

    await ctx.reply(
      `${userName} –≤–æ—à–µ–ª(–ª–∞) –≤ —Ä–µ–∂–∏–º –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤.` +
        '\n–í—ã–±–∏—Ä–∞–π –∫—É–±–∏–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ä–º—É–ª—É',
      {
        disable_notification: true,
        reply_markup: {
          keyboard
        }
      }
    );

    await handler(conversation);
    await leaveScene(ctx);
  }
};

export default diceCommand;
